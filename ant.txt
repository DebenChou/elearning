Ant之build.xml配置详解
build.xml配置参数
构建文件默认叫build.xml，其有很多配置参数。

project
每个构建文件都有一个project标签，有以下属性：
- default：表示默认的运行目标，这个属性是必须的。
- basedir：表示项目的基准目录。
- name：表示项目名。
- description：表示项目的描述。

每个项目对应一个构建文件，但是如果项目比较复杂，业务线比较多，则有可能对应很多个构建文件，比如：

这时我们需要注意，每个构建文件都需要以project标签包含起来。

property
类似于常量，可以供给build.xml中的其他标签使用。有两个特点：
- 大小写敏感
- 不可改变，谁先设定，之后的都不能改变。

该标签可以与多个属性配合使用。
- name和value:
<property name="module_name" value="admin"/>
后面直接使用即可：
<echo message="begin nej-build ${module_name}..."/>
- name和refid:
<property name="srcpath" refid="dao.compile.classpath"/>
其中的dao.compile.classpath在别的地方进行了定义。当然，也可以通过直接引用的方式：
<property name="baseline.dir" value="${ob_baseline.dir}"/>
- name和location:
<property name="srcdir" location="src"/>
将srcdir的值设置为当前文件路径/src。
- file:
<property file="./omad/build.properties"/>
导入相对文件中的所有变量，这里的build.properties专门用来存放各种变量，示例如下：

url:
<property url="http://www.mysite.com/bla/props/foo.properties"/>
导入对应文件的属性
environment:
<property environment="env"/>
设置系统的环境变量前缀为env。比如
<property name="tomcat.home" value="${env.CATALINA_HOME}"/>
将系统的tomcat安装目录设置到tomcat.home属性中。
import
引入别的xml文件，提高复用性：

<import file="./env-judge.xml"/>
<import file="./tasks.xml"/>

甚至可以批量匹配：

<copy todir="${basedir}/src/html/${html.dir}" overwrite="true" includeEmptyDirs="true">
    <fileset dir="${basedir}/lib">
        <include name="module-*/**" />
    </fileset>
</copy>

target
任务，一个project标签下有一个或多个target标签，代表任务，任务间可以存在依赖关系。有如下属性：
- name：用于标识，这个是必须的
- depends：用来指定所依赖的任务。

<!-- 初始化任务 -->
<target name="init">
    <echo message="  init ${init}   ..."/>
</target>

<!-- 编译 -->
<target name="compile" depends="init">
    <delete dir="${classes.dir}" />
    <mkdir dir="${classes.dir}" />
    <javac srcdir="${src.dir}" destdir="${classes.dir}">
        <classpath refid="master-classpath" />
    </javac>
</target>

if：当属性设置时才执行该任务。
<target name="sync_module_k12_teach" if="${is_k12_teach}">
    <antcall target="sync_module_item">
        <param name="html.dir" value="org"/>
    </antcall>
</target>

<target name="sync_module_backend" if="${is_backend}">
    <antcall target="sync_module_item">
        <param name="html.dir" value="admin"/>
    </antcall>
</target>

<target name="sync_module_k12_backend" if="${is_k12_backend}">
    <antcall target="sync_module_item">
        <param name="html.dir" value="admin"/>
    </antcall>
</target>

通过判断变量是否存在，执行不同的任务。
- unless：当属性未设置时才执行。
- description：任务描述。

echo
控制台显示

<echo message="begin clean res/module-xx、component-xx、res-base..."/>

delete
删除文件或文件目录，有如下属性
- file：删除文件
- dir：删除目录
- includeEmptyDirs：值得是否删除空目录，默认是true
- failonerror：报错是否停止，默认是true
- verbose：是否列出删除的文件，默认是false

示例如下：

<!--clean other dir-->
<target name="clean_other_dir">
    <echo message="begin clean_other_dir..."/>
    <delete dir="${basedir}/${compress.dir}"/>
    <delete dir="${basedir}/pub"/>
    <echo message="begin clean html module-xx..."/>
    <delete includeemptydirs="true">
        <fileset dir="${basedir}/src/html" >
            <include name="**/module-*/**"/>
        </fileset>
    </delete>
    <echo message="begin clean res/module-xx、component-xx、res-base..."/>
    <delete includeemptydirs="true">
        <fileset dir="${basedir}/res" >
            <include name="module-*/**"/>
            <include name="component-*/**"/>
            <include name="res-base/**"/>
        </fileset>
    </delete>
</target>

mkdir
创建一个目录

<mkdir dir=”＄{class.root}”/>

copy
拷贝文件或文件目录，属性如下：
- file:表示源文件。
- tofile:表示目标文件。
- todir:表示目标目录。
- overwrite:是否覆盖目标文件，默认为false。
- includeEmptyDirs:是否拷贝空目录，默认为true。
- failonerror:如目标没有发现是否自动停止，默认值true。
- verbose:是否显示详细信息，默认值false。

示例：

<target name="cp">
    <copy todir="${compress.dir}" overwrite="true">
         <fileset dir="${ob_baseline.dir}">
            <include name="pub/" />
            <include name="res/" />
            <include name="mail_template/" />
         </fileset>
    </copy>
</target>

fileset
文件集标签，通常与任务结合来使用，例如上面的copy的demo中，通过将fileset定义的文件路径下的文件，拷贝到todir指定的路径中。
也可以用于批量删除：

<delete includeemptydirs="true">
    <fileset dir="${basedir}/src/html" >
        <include name="**/module-*/**"/>
    </fileset>
</delete>
<echo message="begin clean res/module-xx、component-xx、res-base..."/>
<delete includeemptydirs="true">
    <fileset dir="${basedir}/res" >
        <include name="module-*/**"/>
        <include name="component-*/**"/>
        <include name="res-base/**"/>
    </fileset>
</delete>

也就是说，但凡遇到文件集操作，都需要用到fileset标签。

exec
用来执行系统命令，或者指定环境的命令。
比如：

<target name="test">
    <exec executable="cmd.exe">
        <arg line="/c dir"/>
    </exec>
</target>

打开命名行，并转到c盘执行dir命令。

能够执行系统命令，就相当于可以执行各种环境比如node、gulp、bower等等：

<!--build style-->
<target name="build_style">
    <echo message="begin build_style..."/>
    <exec dir="." executable="gulp" failonerror="true">
        <arg line="scss"/>
    </exec>
</target>

<!--bower cache clean if必须是${]才是判断true,false, 否则只要有设定值即可执行-->
<target name="bower_cache_clean" if="${is_bower_cache_clean}">
    <echo message="begin bower_cache_clean ..."/>
    <exec dir="." executable="bower" failonerror="true">
        <arg line="cache clean" />
    </exec>
</target>

antcall
执行某个定义的任务。

<target name="sync_module_teach" if="${is_teach}">
    <antcall target="sync_module_item">
        <param name="html.dir" value="org"/>
    </antcall>
</target>

执行sync_module_item任务，并设置参数html.dir的值为org。
该任务定义如下：

<target name="sync_module_item">
    <echo message="begin sync_module ${html.dir}..."/>
    <copy todir="${basedir}/src/html/${html.dir}" overwrite="true" includeEmptyDirs="true">
        <fileset dir="${basedir}/lib">
            <include name="module-*/**" />
        </fileset>
    </copy>
</target>

或者更为简单的表达：

<target name="deploy">
    <echo message="begin auto deploy......"/>
    <antcall target="clean"/>
    <antcall target="bower_install"/>
    <antcall target="cnpm_install"/>
    <antcall target="sync_module"/>
    <antcall target="build_style"/>
    <antcall target="nej_build" />
    <antcall target="cp"/>
</target>

parallel
并行执行多个子任务。

<parallel failonany="true">
    <antcall target="sync_module_corp"/>
    <antcall target="sync_module_main"/>
    <antcall target="sync_module_teach"/>
    <antcall target="sync_module_backend"/>
    <antcall target="sync_module_passport"/>
    <antcall target="sync_module_business"/>
    <antcall target="sync_module_k12_teach"/>
    <antcall target="sync_module_k12_backend"/>

    <antcall target="build_style"/>
</parallel>

通过failonany控制如果一个失败，则不执行。通过并行执行，来提升性能，降低构建花费的时间。

regexp
用于正则的定义的使用，可以与matches结合使用。
比如，定义正则：

<regexp id="regexp_env_test" pattern="^${root_dir}/(${test_dir}|${test_k12_dir})/.+"/>
<regexp id="regexp_env_pre" pattern="^${root_dir}/(${pre_dir}|${pre_k12_dir})/.+"/>

通过pattern指定正则内容，通过id标识。
在需要匹配的时候，使用之：

<condition property="is_test">
    <matches string="${basedir}">
        <regexp refid="regexp_env_test"/>
    </matches>
</condition>

condition
用来判断，如果包含的内容符合条件，则将property指定的属性设置为true，否则为false。
比如上面的例子中，就是将basedir变量的值和regexp_env_test对应的正则匹配，如果正确，就将is_test设置为true，然后后面的流程再去判断。
与之配合的标签有很多，下面一一介绍:
- istrue,isfalse:断言

<condition property="is_test_backend">
    <and>
        <istrue value="${is_test}"/>
        <istrue value="${is_backend}"/>
    </and>
</condition>

只有is_test和is_backend变量的值均为true，is_test_backend的值才为true。
- and:逻辑与，需要都满足条件才行，如上例所述。
- not:逻辑非，反过来的结果。
- or,xor:逻辑或和逻辑异或。
- isset：指定属性是否存在：

<condition property="scondition">
    <!--如果属性name不存在则返回false-->
    <isset property="name"/>
</condition>

equils：指定属性是否相等：
<condition property="scondition">
    <!--如果arg1的值与arg2的值相等返回true，否则为false-->
    <equals arg1="${name}" arg2="this is name"/>
</condition>

filesmatch：指定文件是否相等：
<condition property="scondition">
    <!--如果file1所代表的文件与file2所代表的文件相等返回true，否则为false-->
    <filesmatch file1="testfile1.txt" file2="testfile2.txt"/>
</condition>


1.标签
每个构建文件对应一个项目。标签时构建文件的根标签。它可以有多个内在属性，就如代码中所示，其各个属性的含义分别如下。
(1) default表示默认的运行目标，这个属性是必须的。
(2) basedir表示项目的基准目录。
(3) name表示项目名。
(4) description表示项目的描述。
每个构建文件都对应于一个项目，但是大型项目经常包含大量的子项目，每一个子项目都可以有自己的构建文件。
2.标签
一个项目标签下可以有一个或多个target标签。一个target标签可以依赖其他的target标签。例如，有一个target用于编译程序，另一个target用于声称可执行文件。在生成可执行文件之前必须先编译该文件，因策可执行文件的target依赖于编译程序的target。Target的所有属性如下。
(1).name表示标明，这个属性是必须的。
(2).depends表示依赖的目标。
(3)if表示仅当属性设置时才执行。
(4)unless表示当属性没有设置时才执行。
(5)description表示项目的描述。
Ant的depends属性指定了target的执行顺序。Ant会依照depends属性中target出现顺序依次执行每个target。在执行之前，首先需要执行它所依赖的target。程序中的名为run的target的depends属性compile，而名为compile的target的depends属性是prepare，所以这几个target执行的顺序是prepare->compile->run。一个target只能被执行一次，即使有多个target依赖于它。如果没有if或unless属性，target总会被执行。
3.标签
该标签用于创建一个目录，它有一个属性dir用来指定所创建的目录名，其代码如下：通过以上代码就创建了一个目录，这个目录已经被前面的property标签所指定。
4标签
该标签用来生成一个JAR文件，其属性如下。
(1) destfile表示JAR文件名。
(2) basedir表示被归档的文件名。
(3) includes表示别归档的文件模式。
(4) exchudes表示被排除的文件模式。
5．
该标签用于编译一个或一组java文件，其属性如下。
(1).srcdir表示源程序的目录。
(2).destdir表示class文件的输出目录。
(3).include表示被编译的文件的模式。
(4).excludes表示被排除的文件的模式。
(5).classpath表示所使用的类路径。
(6).debug表示包含的调试信息。
(7).optimize表示是否使用优化。
(8).verbose 表示提供详细的输出信息。
(9).fileonerror表示当碰到错误就自动停止。
6．标签
该标签用来执行编译生成的.class文件，其属性如下。
(1).classname 表示将执行的类名。
(2).jar表示包含该类的JAR文件名。
(3).classpath所表示用到的类路径。
(4).fork表示在一个新的虚拟机中运行该类。
(5).failonerror表示当出现错误时自动停止。
(6).output 表示输出文件。
(7).append表示追加或者覆盖默认文件。
7.标签
该标签用于删除一个文件或一组文件，去属性如下。
(1)/file表示要删除的文件。
(2).dir表示要删除的目录。
(3).includeEmptyDirs 表示指定是否要删除空目录，默认值是删除。
(4).failonerror 表示指定当碰到错误是否停止，默认值是自动停止。
(5).verbose表示指定是否列出所删除的文件，默认值为不列出。
8.标签
该标签用于文件或文件集的拷贝，其属性如下。
(1).file 表示源文件。
(2).tofile 表示目标文件。
(3).todir 表示目标目录。
(4).overwrite 表示指定是否覆盖目标文件，默认值是不覆盖。
(5).includeEmptyDirs 表示制定是否拷贝空目录，默认值为拷贝。
(6).failonerror 表示指定如目标没有发现是否自动停止，默认值是停止。
(7).verbose 表示制定是否显示详细信息，默认值不显示。

Ant的数据类型
在构建文件中为了标识文件或文件组，经常需要使用数据类型。数据类型包含在org.apache.tool.ant.types包中。下面镜简单介绍构建文件中一些常用的数据类型。
1. argument 类型
由Ant构建文件调用的程序，可以通过元素向其传递命令行参数，如apply,exec和java任务均可接受嵌套元素，可以为各自的过程调用指定参数。以下是的所有属性。
(1).values 是一个命令参数。如果参数种有空格，但又想将它作为单独一个值，则使用此属性。
(2).file表示一个参数的文件名。在构建文件中，此文件名相对于当前的工作目录。
(3).line表示用空格分隔的多个参数列表。
(4).path表示路径。
2.ervironment 类型
由Ant构建文件调用的外部命令或程序，元素制定了哪些环境变量要传递给正在执行的系统命令，元素可以接受以下属性。
(1).file表示环境变量值得文件名。此文件名要被转换位一个绝对路径。
(2).path表示环境变量的路径。Ant会将它转换为一个本地约定。
(3).value 表示环境变量的一个直接变量。
(4).key 表示环境变量名。
注意file path 或 value只能取一个。
3.filelist类型
Filelist 是一个支持命名的文件列表的数据类型，包含在一个filelist类型中的文件不一定是存在的文件。以下是其所有的属性。
(1).dir是用于计算绝对文件名的目录。
(2).files 是用逗号分隔的文件名列表。
(3).refid 是对某处定义的一个的引用。
注意:dir 和 files 都是必要的，除非指定了refid(这种情况下，dir和files都不允许使用)。
4.fileset类型
Fileset 数据类型定义了一组文件，并通常表示为元素。不过，许多ant任务构建成了隐式的fileset,这说明他们支持所有的fileset属性和嵌套元素。

以下为fileset 的属性列表。
(1).dir表示fileset 的基目录。
(2).casesensitive的值如果为false，那么匹配文件名时，fileset不是区分大小写的，其默认值为true.
(3).defaultexcludes 用来确定是否使用默认的排除模式，默认为true。
(4).excludes 是用逗号分隔的需要派出的文件模式列表。
(5).excludesfile 表示每行包含一个排除模式的文件的文件名。
(6).includes 是用逗号分隔的，需要包含的文件模式列表。
(7).includesfile 表示每行包括一个包含模式的文件名。
5.patternset 类型
Fileset 是对文件的分组，而patternset是对模式的分组，他们是紧密相关的概念。支持4个属性：includes excludex includexfile 和excludesfile,与fileset相同。Patternset 还允许以下嵌套元素：include,exclude,includefile 和 excludesfile.
6.filterset 类型
Filterset定义了一组过滤器，这些过滤器将在文件移动或复制时完成文件的文本替换。主要属性如下：
(1).begintoken 表示嵌套过滤器所搜索的记号，这是标识其开始的字符串。
(2).endtoken表示嵌套过滤器所搜索的记号这是标识其结束的字符串。
(3).id是过滤器的唯一标志符。
(4).refid是对构建文件中某处定义一个过滤器的引用。
7.Path类型
Path元素用来表示一个类路径，不过它还可以用于表示其他的路径。在用作揖个属性时，路经中的各项用分号或冒号隔开。在构建的时候，此分隔符将代替当前平台中所有的路径分隔符，其拥有的属性如下。
(1).location 表示一个文件或目录。Ant在内部将此扩展为一个绝对路径。
(2).refid 是对当前构建文件中某处定义的一个path的引用。
(3).path表示一个文件或路径名列表。
8.mapper类型
Mapper类型定义了一组输入文件和一组输出文件间的关系，其属性如下。
(1).classname 表示实现mapper类的类名。当内置mapper不满足要求时，用于创建定制mapper.
(2).classpath表示查找一个定制mapper时所用的类型路径。
(3).classpathref是对某处定义的一个类路径的引用。
(4).from属性的含义取决于所用的mapper.
(5).to属性的含义取决于所用的mapper.
(6).type属性的取值为identity，flatten glob merge regexp 其中之一，它定义了要是用的内置mapper的类型。


brew install ant
ant -version
ant -buildfile build.xml


