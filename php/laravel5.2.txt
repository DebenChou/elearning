* * * * * php /path/to/artisan schedule:run >> /dev/null 2>&1

php artisan make:console Crontab --command=crontab
php artisan schedule:run

php artisan crontab --online
php artisan crontab --day 0
php artisan crontab --day 1
php artisan crontab --vip
php artisan crontab --month 1
php artisan crontab --invite 1

$schedule->command('crontab --online')->everyMinute(); //每分钟
$schedule->command('crontab --day 0')->cron("10 */1 * * *"); //每小时10分钟
$schedule->command('crontab --day 1')->daily(); //每天0点
$schedule->command('crontab --vip')->daily(); //每天0点
$schedule->command('crontab --month 1')->cron("5 0 1 * *"); //每月1号0:05
$schedule->command('crontab --invite 1')->cron("9 0 1 * *"); //每月1号0:09
$schedule->exec('node /home/forge/script.js')->daily();

wget https://phar.phpunit.de/phpunit.phar
chmod +x phpunit.phar
sudo mv phpunit.phar /usr/local/bin/phpunit
phpunit --version
./vendor/phpunit/phpunit/phpunit tests/TestCase.php

php artisan make:test Test1
./vendor/phpunit/phpunit/phpunit tests/Test1.php


$this->response：web应用返回的最后一个响应
$this->currentUri：当前访问的URL
visit($uri)：通过GET请求访问给定URI
get($uri, array $headers = [])：通过GET请求获取给定URI页面的内容，可以传递请求头信息（可选）
post($uri, array $data = [], array $headers = [])：提交POST请求到给定URI
put($uri, array $data = [], array $headers = [])：提交PUT请求到给定URI
patch($uri, array $data = [], array $headers = [])：提交PATCH请求到给定URI
delete($uri, array $data = [], array $headers = [])：提交DELETE请求到给定URI
followRedirects()：根据最后响应进行任意重定向
see($text, $negate = false)：断言给定文本在页面中是否出现
dontSee()
seeJson(array $data = null)：断言响应中是否包含JSON，如果传递了$data，还要断言包含的JSON是否与给定的匹配
seeJsonEquals
seeJsonStructure
seeStatusCode($status)：断言响应是否包含期望的状态码
seePageIs($uri)：断言当前页面是否与给定URI匹配
seeOnPage($uri)和landOn($uri)：seePageIs()的别名
click($name)：使用给定body、name或者id点击链接
type($text, $element)：使用给定文本填充输入框
check($element)：检查页面上的checkbox复选框
select($option, $element)：选择页面上下拉列表的某个选项
attach($absolutePath, $element)：上传文件到表单
press($buttonText)：通过使用给定文本的按钮提交表单
withoutMiddleware()：在测试中不使用中间件
dump()：输出最后一个响应返回的内容
$app：Laravel 5.1 应用实例
$code：Artisan命令返回的最后一个码值
refreshApplication()：刷新应用。该操作由TestCase的setup()方法自动调用
call($method, $uri, $parameters = [], $cookies = [], $files = [], $server = [], $content = null)：调用给定URI并返回响应
callSecure($method, $uri, $parameters = [], $cookies = [], $files = [], $server = [], $content = null)：调用给定HTTPS URI并返回响应
action($method, $action, $wildcards = [], $parameters = [], $cookies = [], $files = [], $server = [], $content = null)：调用控制器动作并返回响应
route($method, $name, $routeParameters = [], $parameters = [], $cookies = [], $files = [], $server = [], $content = null)：调用命名路由并返回响应
instance($abstract, $object)：在容器中注册对象实例
expectsEvents($events)：指定被给定操作触发的事件列表
withoutEvents()：无需触发事件模拟事件调度
expectsJobs($jobs)：为特定操作执行被调度的任务列表
withSession(array $data)：设置session到给定数组
flushSession()：清空当前session中的内容
startSession()：开启应用Session
actingAs($user)：为应用设置当前登录用户
be($user)：为应用设置当前登录用户
seeInDatabase($table, array $data, $connection = null)：断言给定where条件在数据库中存在
notSeeInDatabase($table, $array $data, $connection = null)：断言给定where条件在数据库中不存在
missingFromDatabase($table, array $data, $connection = null)：notSeeInDatabase()的别名
seed()：填充数据库
artisan($command, $parameters = [])：执行Artisan命令并返回码值
assertPageLoaded($uri, $message = null)：断言最后被加载的页面；如果加载失败抛出异常：$uri/$message
assertResponseOk()：断言客户端返回的响应状态码是否是200
assertReponseStatus($code)：断言客户端返回的响应状态码是否和给定码值相匹配
assertViewHas($key, $value = null)：断言响应视图包含给定数据片段
assertViewHasAll($bindings)：断言视图包含给定数据列表
assertViewMissing($key)：断言响应视图不包含给定数据片段
assertRedirectedTo($uri, $with = [])：断言客户端是否重定向到给定URI
assertRedirectedToRoute($name, $parameters = [], $with = [])：断言客户端是否重定向到给定路由
assertRedirectedToAction($name, $parameters = [], $with = [])：断言客户端是否重定向到给定动作
assertSessionHas($key, $value = null)：断言session包含给定键/值
assertSessionHasAll($bindings)：断言session包含给定值列表
assertSessionHasErrors($bindings = [])：断言session包含绑定错误
assertHasOldInput()：断言session中包含上一次输入
assertEquals(v1, v2);
$response = $this->call('GET', '/');
$response = $this->call('POST', '/user', ['name' => 'Taylor']);
$this->assertEquals(200, $response->status());
$this->seeInDatabase('users', ['email' => 'sally@foo.com']);
$this->withSession(['foo' => 'bar'])->visit('/');
https://laravelacademy.org/post/3274.html
https://www.jianshu.com/p/74776e4a570d

->cron('* * * * *');	在自定义Cron调度上运行任务
->everyMinute();	每分钟运行一次任务
->everyFiveMinutes();	每五分钟运行一次任务
->everyTenMinutes();	每十分钟运行一次任务
->everyThirtyMinutes();	每三十分钟运行一次任务
->hourly();	每小时运行一次任务
->daily();	每天凌晨零点运行任务
->dailyAt('13:00');	每天13:00运行任务
->twiceDaily(1, 13);	每天1:00 & 13:00运行任务
->weekly();	每周运行一次任务
->monthly();	每月运行一次任务
->quarterly();	每个季度运行一次
->yearly();	每年运行一次
如果需要某天的那个时间：
->at('13:00')　　//13点才会执行

->weekdays();	只在工作日运行任务
->sundays();	每个星期天运行任务
->mondays();	每个星期一运行任务
->tuesdays();	每个星期二运行任务
->wednesdays();	每个星期三运行任务
->thursdays();	每个星期四运行任务
->fridays();	每个星期五运行任务
->saturdays();	每个星期六运行任务
->when(Closure);	基于特定测试运行任务

$schedule->call(function () {
    // 每周星期一13:00运行一次...
})->weekly()->mondays()->at('13:00');

基于测试的约束条件
when方法用于限制任务在通过给定测试之后运行。换句话说，如果给定闭包返回true，只要没有其它约束条件阻止任务运行，该任务就会执行：
$schedule->command('emails:send')->daily()->when(function () {
    return true;
});

避免任务重叠
默认情况下，即使前一个任务仍然在运行调度任务也会运行，要避免这样的情况，可使用withoutOverlapping方法：
$schedule->command('emails:send')->withoutOverlapping();

Laravel调度器为处理调度任务输出提供了多个方便的方法。首先，使用sendOutputTo方法，你可以发送输出到文件以便稍后检查：
$schedule->command('emails:send')
         ->daily()
         ->sendOutputTo($filePath);
使用emailOutputTo方法，你可以将输出发送到电子邮件，注意输出必须首先通过sendOutputTo方法发送到文件。还有，使用电子邮件发送任务输出之前，应该配置Laravel的电子邮件服务：
$schedule->command('foo')
         ->daily()
         ->sendOutputTo($filePath)
         ->emailOutputTo('foo@example.com');

使用before和after方法，你可以指定在调度任务完成之前和之后要执行的代码：

$schedule->command('emails:send')
         ->daily()
         ->before(function () {
             // Task is about to start...
         })
         ->after(function () {
             // Task is complete...
         });

使用pingBefore和thenPing方法，调度器可以在任务完成之前和之后自动ping给定的URL。该方法在通知外部服务时很有用，例如Laravel Envoyer，在调度任务开始或完成的时候：
$schedule->command('emails:send')
         ->daily()
         ->pingBefore($url)
         ->thenPing($url);
使用pingBefore($url)或thenPing($url)特性需要安装HTTP库Guzzle，可以在composer.json 文件中添加如下行来安装Guzzle到项目：
"guzzlehttp/guzzle": "~5.3|~6.0"

你可以通过 command() 来调用 artisan 命令, call 来调用方法或函数， 或者 terminal() 来执行单行命令脚本：
$schedule->call('YourClass@someMethod')->twiceDaily();
$schedule->call(function() {
    // Do stuff
})->everyFiveMinutes();
$schedule
    ->call('Mailer@BusinessDayMailer') // 执行类方法
    ->weekdays() // 周一到周五执行
    ->skip(function(TypeHintedDeciderClass $decider) { // 如果是节假日则跳过
        return $decider->isHoliday();
    });

if ($this->confirm('Do you wish to continue? [y|N]')) {
    //
}
$name = $this->anticipate('What is your name?', ['Taylor', 'Dayle']);
$name = $this->choice('What is your name?', ['Taylor', 'Dayle'], false);
$name = $this->ask('What is your name?');
$password = $this->secret('What is the password?');

$this->info('Display this on the screen');
$this->error('Something went wrong!');
$this->line('Display this on the screen');

表格布局
$headers = ['Name', 'Email'];
$users = App\User::all(['name', 'email'])->toArray();
$this->table($headers, $users);

进度条
$users = App\User::all();
$bar = $this->output->createProgressBar(count($users));
foreach ($users as $user) {
    $this->performTask($user);
    $bar->advance();
}
$bar->finish();

通过代码调用命令
Route::get('/foo', function () {
    $exitCode = Artisan::call('email:send', [
        'user' => 1, '--queue' => 'default'
    ]);
});
Artisan命令放到队列中
Route::get('/foo', function () {
    Artisan::queue('email:send', [
        'user' => 1, '--queue' => 'default'
    ]);
});

$this->callSilent('email:send', [
   'user' => 1, '--queue' => 'default'
]);






