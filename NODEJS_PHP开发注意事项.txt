NODEJS
1、排版整齐，风格统一：
- 不要使用自动排版，除非可自定义自动排版
- 使用TAB不要使用四个空格缩进
- 运算符前后有空格，常用关键字后有空格(if/for/while)，{前空格，并且不另起行
- 注释使用单行注释，每个BUG修改后要增加谁什么时间修改的注释
- 使用驼峰命令规则
- 只要合适，在变量名的末尾追加计算限定符（Avg、Sum、Min、Max、Index）
- 在变量名前使用互补对，如 min/max、begin/end 和 open/close
- 布尔变量名应该前加或包含 Is、is、Use、use
- 尽量减少使用缩写，要看名字就能看懂意思
- 在命名函数时包括返回值的说明，如 GetCurrentWindowName()
- 不要使用原义数字或原义字符串，不要直接使用7数字，应该使用 DAYS_IN_WEEK = 7
- 变量名命名规则：形容词+名词（或名词）
- 函数命名规则：动词+名词（或动词）
- 控件命名：类别+名称 如txtName
- 同一个功能使用相同的名字，方便快速定位、快速查找问题
- 每个JS文件第一步：第一行增加'use strict';使用严格模式
- 第二步：require引入第三放库
- 第三步：require引入热更新库
- 第四步：require引入数据+定义变量
- 第五步：定义function类+定义类的原型
- 第六步：实现业务逻辑
- 第七步：导出带热更新类
- 第八步：将JS文件路径加入热更新require工厂
- 老项目运行的是ES6以下NODEJS5.12版本
- 新项目运行的是ES6以上NODEJS6.12版本，可以使用let,const,=>等特性
- 函数遵循能结束早结束原则，不要嵌套太多的if；
- 比较尽可能多使用 ===、!--、!、!!
- 比较尽可能多使用'少使用"
2、每次热更新后JS里的变量都重新赋值，如果想不被重新赋值必须放在另一个JS文件中写 module.exports.users = {}; 或者在类的function里写 this.user = {}; 相当于构造函数，这种写法不会被热更新
3、setTimeout/setInterval回调函数里直接写代码也不会热更新，只有setInterval(function() { service.showGameStat(); }, 1000); 这样给回调新起函数写才可以热更新。
4、热更新后执行代码的写法：beans里增加runupdate: 'init'，init为热更新后执行的函数
5、数组([])循环不能用forin，应该这么写for (var i = 0, len = list.length; i < len; i++)性能最高
6、Pomelo RPC接口里面结束之前一定要执行回调函数(next)，如果没有或执行超过20秒会报500超时错误
7、循环里面调用带回调函数的，回调函数内又用到循环的参数，循环内的代码一定要新起一个函数实现
8、Pomelo接口完成了，可以在web-server里写测试代码


PHP
1、排版整齐，风格统一：
- 前几条同上
- 函数处理第一步：接收数据+转换数据类型
- 第二步：验证接收数据
- 第三步：加锁
- 第四步：验证数据库数据，失败要解锁
- 第五步：实现业务逻辑
- 第六步：结束前解锁
- 第七步：结束返回数据
- 支付回调/活动领取一定要加锁。不重要的可以不用加锁，一样遵循能结束早结束原则。
- laravel模版代码尽可能使用PHP原始代码，不要使用laravel模版特性
2、代码不要上来就写，先要分析了解需求，每个活动都会包含几个部分
- 前端：取配置接口/领取接口 最少会有这2个接口
- 后端配置：配置设置功能
- 后端报表：领取日志/生成每日总表
- 设计数据库：增加领取日志表、修改每日汇总存储过程
3、数据库
- 建表时多个字段可以决定主键的一定不要新加自增列，同时用的多的放前面
- 建表后：有关联用户ID的字段要加索引，有按时间查数据的时间要加索引
- 不要写count(0)、count(*)等，应该count(第一个主键)
- 复杂的报表需要用计划去跑。
- 定期查看慢查询，优化慢查询
- 如果一定要用TEXT，要放在新表中，不要和其它数据混在一个表
- 存储过程的in参数一定不要和字段名一样，要加个数据类型前缀
4、代码目录结构
- app/Console 计划任务：每小时/每分钟跑报表代码
- app/Models MODEL数据库操作 按系统区分：活动/日志/报表/代理/设置/用户权限
- resources/views VIEW视图代码 按前后端区分，后台按系统区分
- app/Http/Controllers CONTROLLER控制器代码 按前后端区分，按系统区分
- app/CacheManager.php 缓存代码
- app/PhpApiServer.php PHP和NODEJS通信代码
- config/app.php 常量的配置
- config/mobile.php 支付配置，微信，支付宝等等
- pubilc/client/ CDN资源包含JS、CSS、IMG资源
5、尽可能不要存在双重或更多循环的代码
6、数据库操作使用PDO增加占位符?、:变量，参数化传递执行
7、自我测试需要注意
- 想象每一个函数/方法调用尽可能存在的情况。
- 测试所有按钮/链接/图片是否可点，链接地址是否正确，是否存在无效链接。
- 每一个可输入控件都要输入特殊字符去测试。每一个URL参数都要输入特殊字符去测试。
- 特殊字符：
'
"
or 1=1
or 1=2
<script>alert(1)</script>
''%' or 1=1;--
\r\n
\n
- 界面是否美观/颜色是否刺眼/哪里可以改进。
- 提交数据是否可刷新多次提交。多次快速连续点击保存，保存按钮是否可用，是否已多次提交数据。
- 是否可查看，修改，删除，更新别人的信息。
- 是否有登录漏洞/是否可本地提交数据/程序是否验证数据的格式、安全性和恶意性
8、从其它平台移功能时，你就会发现命名的重要性和GIT完整功能一个提交的重要性
9、

GIT注意事项
- 不要提交没有用的代码(本地配置文件/IDE配置文件/测试代码)，提交前一定要看看是不是你要改的要提交的代码，无关未完成代码不要提交，更不要看都不看全选直接提交
- 别人的测试代码合并到你的分支上了，你的代码一定不要合并到线上分支，必须更新要给代码COPY到主分支
- 每个功能测试完成没有问题了提交一个版本，不要改一行提交一下
- 有冲突了一定不能为了解决冲突删除别人的代码，要看清楚谁的才是最新并且正确的代码
- 提交的代码一定要写描述，并且描述要清晰
- 线上分支的代码必须保证是新的，实时可以更新的，没有完成的功能，测试阶段的都不能直接合并到线上分支
- git status 查看如果发现 您的分支领先 'origin/当前分支' 共 几 个提交，说明当前分支已经有一些问题了，如果恢复使用：
git fetch
git checkout 分支
git reset --hard HEAD 或 git reset --hard xxxxxxx
git pull origin 分支
- 将某个项目分支的某个提交 COPY 到其它分支：
git fetch 远程GIT地址 分支
git cherry-pick 提交HASH
- 

